#
# Bareflank Hypervisor
# Copyright (C) 2015 Assured Information Security, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

include(ExternalProject)
include(${CMAKE_CURRENT_LIST_DIR}/CMakeOption_Coverage.txt)
include(${CMAKE_CURRENT_LIST_DIR}/CMakeOption_USan.txt)
include(${CMAKE_CURRENT_LIST_DIR}/CMakeOption_ASan.txt)
# include(${CMAKE_CURRENT_LIST_DIR}/CMakeTarget_Tidy.txt)
# include(${CMAKE_CURRENT_LIST_DIR}/CMakeTarget_Format.txt)

if(NOT CMAKE_CXX_SIZEOF_DATA_PTR STREQUAL "8")
    message(FATAL_ERROR "Only 64bit builds are supported")
endif()

if(ENABLE_UNITTESTING)
    include(CTest)
    enable_testing(true)
endif()

if(ENABLE_DEPEND_UPDATES)
    set_property(GLOBAL PROPERTY EP_UPDATE_DISCONNECTED OFF)
else()
    set_property(GLOBAL PROPERTY EP_UPDATE_DISCONNECTED ON)
endif()

# ------------------------------------------------------------------------------
# OS
# ------------------------------------------------------------------------------

# TODO: Use CMAKE_HOST_SYSTEM_NAME to detect your host OS, and allow for build
# configuration files to override the target OS
execute_process(COMMAND uname -o OUTPUT_VARIABLE UNAME OUTPUT_STRIP_TRAILING_WHITESPACE)
if(UNAME STREQUAL "Cygwin" OR WIN32)
    set(OSTYPE "WIN64")
    set(ABITYPE "MS64")
    set(WIN64 ON)
else()
    set(OSTYPE "UNIX")
    set(ABITYPE "SYSV")
endif()

# TODO: All NASM configuration will be moved into x86_64 toolchain files
find_program(NASM_BIN nasm)
execute_process(COMMAND ${NASM_BIN} -v OUTPUT_VARIABLE NASM_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
set(CMAKE_ASM_NASM_COMPILER_ID ${NASM_ID})
if(CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_ASM_NASM_OBJECT_FORMAT "elf64")
endif()
enable_language(ASM_NASM)
set(CMAKE_ASM_NASM_FLAGS "-d ${ABITYPE}")
set(CMAKE_ASM_NASM_CREATE_SHARED_LIBRARY TRUE)
set(CMAKE_ASM_NASM_CREATE_STATIC_LIBRARY TRUE)

# ------------------------------------------------------------------------------
# Target Information
# ------------------------------------------------------------------------------
# TODO: All toolchain configurations will be moved to specific toolchain
# files at ${BF_TOOLCHAIN_DIR}
if(CMAKE_TOOLCHAIN_FILE)

    message(STATUS "Cross Compiling Enabled")

    get_filename_component(CMAKE_C_COMPILER_NAME ${CMAKE_C_COMPILER} NAME)
    get_filename_component(CMAKE_CXX_COMPILER_NAME ${CMAKE_CXX_COMPILER} NAME)

    string(REPLACE "-" ";" CMAKE_C_COMPILER_LIST ${CMAKE_C_COMPILER_NAME})
    string(REPLACE "-" ";" CMAKE_CXX_COMPILER_LIST ${CMAKE_CXX_COMPILER_NAME})

    list(LENGTH CMAKE_C_COMPILER_LIST CMAKE_C_COMPILER_LIST_LEN)
    list(LENGTH CMAKE_CXX_COMPILER_LIST CMAKE_CXX_COMPILER_LIST_LEN)

    if(CMAKE_C_COMPILER_LIST_LEN LESS 3)
        message(FATAL_ERROR "Invalid C compiler. Expecting triple format: arch-os-compiler or arch-os-compiler-version")
    endif()

    if(CMAKE_CXX_COMPILER_LIST_LEN LESS 3)
        message(FATAL_ERROR "Invalid CXX compiler. Expecting triple format: arch-os-compiler or arch-os-compiler-version")
    endif()

    list(GET CMAKE_C_COMPILER_LIST 0 CMAKE_C_COMPILER_ARCH)
    list(GET CMAKE_CXX_COMPILER_LIST 0 CMAKE_CXX_COMPILER_ARCH)

    list(GET CMAKE_C_COMPILER_LIST 1 CMAKE_C_COMPILER_OS)
    list(GET CMAKE_CXX_COMPILER_LIST 1 CMAKE_CXX_COMPILER_OS)

    if(NOT ${CMAKE_C_COMPILER_ARCH} STREQUAL ${CMAKE_CXX_COMPILER_ARCH})
        message(FATAL_ERROR "Invalid C/CXX compiler combination. Non-matching arch")
    endif()

    if(NOT ${CMAKE_C_COMPILER_OS} STREQUAL ${CMAKE_CXX_COMPILER_OS})
        message(FATAL_ERROR "Invalid C/CXX compiler combination. Non-matching OS")
    endif()

    set(BAREFLANK_TARGET_ARCH ${CMAKE_C_COMPILER_ARCH})
    set(BAREFLANK_TARGET_OS ${CMAKE_C_COMPILER_OS})

    set(BAREFLANK_TARGET ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf)
    set(BAREFLANK_SYSROOT_PATH ${CMAKE_INSTALL_PREFIX}/sysroots/${BAREFLANK_TARGET})

    find_program(CMAKE_AR ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf-ar)

    message(STATUS "Cross Compiler AR: ${CMAKE_AR}")

else()

    set(BAREFLANK_TARGET_ARCH "x86_64")
    set(BAREFLANK_TARGET_OS "vmm")

    set(BAREFLANK_TARGET ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf)
    set(BAREFLANK_SYSROOT_PATH ${CMAKE_INSTALL_PREFIX}/sysroots/${BAREFLANK_TARGET})

endif()

message(STATUS "Cross Compiler Target: ${BAREFLANK_TARGET}")
message(STATUS "Cross Compiler Sysroot: ${BAREFLANK_SYSROOT_PATH}")

# ------------------------------------------------------------------------------
# Flag Information
# ------------------------------------------------------------------------------

if(BAREFLANK_TOOLCHAIN_FLAGS)
    message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/${BAREFLANK_TOOLCHAIN_FLAGS}")
    include(${CMAKE_CURRENT_LIST_DIR}/${BAREFLANK_TOOLCHAIN_FLAGS})
else()
    if(WIN32)
        message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_VS.txt")
        include(${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_VS.txt)
    else()
        message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_GCC.txt")
        include(${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_GCC.txt)
    endif()
endif()

# ------------------------------------------------------------------------------
# Sudo
# ------------------------------------------------------------------------------

if(NOT CYGWIN)
    set(SUDO sudo)
endif()
